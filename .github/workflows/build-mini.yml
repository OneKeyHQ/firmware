name: "build-mini"

on:
  schedule:
    - cron: '30 19 * * 0,1,2,3,4'
  workflow_dispatch:

jobs:
  build-mini:
    runs-on: ubuntu-latest

    steps:
      - name: "Checkout"
        uses: actions/checkout@v2.3.4
        with:
          ref: mini

      - name: "Build mini firmware"
        run: |
          sudo apt install protobuf-compiler libprotobuf-dev
          curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python -
          source $HOME/.poetry/env
          wget -q https://armkeil.blob.core.windows.net/developer/Files/downloads/gnu-rm/10.3-2021.10/gcc-arm-none-eabi-10.3-2021.10-x86_64-linux.tar.bz2
          tar -jxf gcc-arm-none-eabi-10.3-2021.10-x86_64-linux.tar.bz2
          export PATH="$PWD/gcc-arm-none-eabi-10.3-2021.10/bin:$PATH"
          sh <(curl -L https://nixos.org/nix/install) --no-daemon
          . $HOME/.nix-profile/etc/profile.d/nix.sh
          poetry install
          nix-shell
          cd legacy
          poetry run make vendor
          poetry run ./script/setup
          poetry run ./script/cibuild


      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: firmware-${{ github.sha }}
          path: |
            ./legacy/firmware/onekey.bin

      - name: Set Env
        run: |
          artifacts_url="$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID"
          echo "ARTIFACTS_URL=$artifacts_url" >> $GITHUB_ENV

      - name: 'Notify to Slack'
        uses: onekeyhq/onekey-github-actions/notice-slack-app-update@main
        with:
          web-hook-url: ${{ secrets.SLACK_DEV_RELEASE_WEBHOOK }}
          artifact-type: Firmware
          artifact-name: Mini-Hardware-Firmware
          artifact-bundle-id: 'so.onekey.firmware'
          artifact-download-url: '${{ env.ARTIFACTS_URL }}'
          change-log: 'Download [Artifacts] at the bottom of page.'
          custom-issue-url: ''
          custom-message-title: ''
          custom-message-payload: ''
