syntax = "proto3";

package protocol;

message Any {
  // A URL/resource name that uniquely identifies the type of the serialized
  // protocol buffer message. The last segment of the URL's path must represent
  // the fully qualified name of the type (as in
  // `path/google.protobuf.Duration`). The name should be in a canonical form
  // (e.g., leading "." is not accepted).
  //
  // In practice, teams usually precompile into the binary all types that they
  // expect it to use in the context of Any. However, for URLs which use the
  // scheme `http`, `https`, or no scheme, one can optionally set up a type
  // server that maps type URLs to message definitions as follows:
  //
  // * If no scheme is provided, `https` is assumed.
  // * An HTTP GET on the URL must yield a [google.protobuf.Type][]
  //   value in binary format, or produce an error.
  // * Applications are allowed to cache lookup results based on the
  //   URL, or have them precompiled into a binary to avoid any
  //   lookup. Therefore, binary compatibility needs to be preserved
  //   on changes to types. (Use versioned type names to manage
  //   breaking changes.)
  //
  // Note: this functionality is not currently available in the official
  // protobuf release, and it is not used for type URLs beginning with
  // type.googleapis.com.
  //
  // Schemes other than `http`, `https` (or the empty scheme) might be
  // used with implementation specific semantics.
  //
  string type_url = 1;

  // Must be a valid serialized protocol buffer of the above specified type.
  bytes value = 2;
}

message Transaction {
    message Contract {
        enum ContractType {
            AccountCreateContract = 0;
            TransferContract = 1;
            TransferAssetContract = 2;
            VoteAssetContract = 3;
            VoteWitnessContract = 4;
            FreezeBalanceContract = 11;
            UnfreezeBalanceContract = 12;
            WithdrawBalanceContract = 13;
            UnfreezeAssetContract = 14;
            TriggerSmartContract = 31;
        }
        ContractType type = 1;
        Any parameter = 2;
        bytes provider = 3;
    }

    message transactionRaw {
        bytes ref_block_bytes = 1;
        uint64 ref_block_num = 3;
        bytes ref_block_hash = 4;
        uint64 expiration = 8;
        //only support size = 1,  repeated list here for extension
        Contract contract = 11;
        uint64 timestamp = 14;
        uint64 fee_limit = 18;
    }

    transactionRaw raw_data = 1;
}

message BlockHeader {
    message blockheaderRaw {
        uint64 timestamp = 1;
        bytes tx_trie_root = 2;
        bytes parent_hash = 3;
        uint64 number = 7;
        uint64 witness_id = 8;
        bytes witness_address = 9;
        uint32 version = 10;
    }
    blockheaderRaw raw_data = 1;
    bytes witness_signature = 2;
}

message TransferContract {
    bytes owner_address = 1;
    bytes to_address = 2;
    uint64 amount = 3;
}

message TransferAssetContract {
    bytes asset_name = 1;
    bytes owner_address = 2;
    bytes to_address = 3;
    uint64 amount = 4;
}

enum ResourceCode {
    BANDWIDTH = 0x00;
    ENERGY = 0x01;
}

message FreezeBalanceContract {
    bytes owner_address = 1;
    uint64 frozen_balance = 2;
    uint64 frozen_duration = 3;

    ResourceCode resource = 10;
    bytes receiver_address = 15;
}

message UnfreezeBalanceContract {
    bytes owner_address = 1;

    ResourceCode resource = 10;
    bytes receiver_address = 15;
}

message UnfreezeAssetContract {
    bytes owner_address = 1;
}

message VoteAssetContract {
    bytes owner_address = 1;
    repeated bytes vote_address = 2;
    bool support = 3;
    uint32 count = 5;
}

message VoteWitnessContract {
    message Vote {
        bytes vote_address = 1;
        uint64 vote_count = 2;
    }
    bytes owner_address = 1;
    repeated Vote votes = 2;
    bool support = 3;
}

message WithdrawBalanceContract {
    bytes owner_address = 1;
}

message TriggerSmartContract {
    bytes owner_address = 1;
    bytes contract_address = 2;
    uint64 call_value = 3;
    bytes data = 4;
    uint64 call_token_value = 5;
    uint64 token_id = 6;
}
