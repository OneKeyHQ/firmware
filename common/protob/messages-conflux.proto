syntax = "proto2";
package hw.trezor.messages.conflux;

// Sugar for easier handling in Java
option java_package = "com.satoshilabs.trezor.lib.protobuf";
option java_outer_classname = "TrezorMessageConflux";


/**
 * Request: Ask device for Conflux address corresponding to address_n path
 * @start
 * @next ConfluxAddress
 * @next Failure
 */
message ConfluxGetAddress {
    repeated uint32 address_n = 1;  // BIP-32 path to derive the key from master node
    optional bool show_display = 2; // optionally show on display before sending the result
    optional uint32 chain_id = 3;   // chain id
}

/**
 * Response: Contains an Conflux address derived from device private seed
 * @end
 */
message ConfluxAddress {
    optional string address = 1;                       // Conflux address as hex-encoded string
}


/**
 * Request: Ask device to sign transaction
 * gas_price, gas_limit and chain_id must be provided and non-zero.
 * All other fields are optional and default to value `0` if missing.
 * Note: the first at most 1024 bytes of data MUST be transmitted as part of this message.
 * @start
 * @next ConfluxTxRequest
 * @next Failure
 */
message ConfluxSignTx {
    repeated uint32 address_n = 1;                       // BIP-32 path to derive the key from master node
    required string to = 2;
    required bytes nonce = 3;
    required bytes value = 4;
    required bytes gas = 5;
    required bytes gas_price = 6;
    required bytes storage_limit = 7;
    required bytes epoch_height = 8;
    required bytes data_initial_chunk = 9;  // The initial data chunk (<= 1024 bytes)
    required uint32 data_length = 10;        // Length of transaction payload
    required uint32 chain_id = 11;   // chain id
}

/**
 * Response: Device asks for more data from transaction payload, or returns the signature.
 * If data_length is set, device awaits that many more bytes of payload.
 * Otherwise, the signature_* fields contain the computed transaction signature. All three fields will be present.
 * @end
 * @next ConfluxTxAck
 */
message ConfluxTxRequest {
    optional uint32 data_length = 1;    // Number of bytes being requested (<= 1024)
    optional uint32 signature_v = 2;    // Computed signature (recovery parameter, limited to 27 or 28)
    optional bytes signature_r = 3;     // Computed signature R component (256 bit)
    optional bytes signature_s = 4;     // Computed signature S component (256 bit)
}

/**
 * Request: Transaction payload data.
 * @next ConfluxTxRequest
 */
message ConfluxTxAck {
    required bytes data_chunk = 1;  // Bytes from transaction payload (<= 1024 bytes)
}

/**
 * Request: Ask device to sign message
 * @start
 * @next ConfluxMessageSignature
 * @next Failure
 */
 message ConfluxSignMessage {
    repeated uint32 address_n = 1;  // BIP-32 path to derive the key from master node
    required bytes message = 2;     // message to be signed
}

/**
 * Response: Signed message
 * @end
 */
message ConfluxMessageSignature {
    required bytes signature = 2;   // signature of the message
    required string address = 3;     // address used to sign the message
}

/**
 * Request: Ask device to sign message cip23
 * @start
 * @next ConfluxMessageSignature
 * @next Failure
 */
message ConfluxSignMessageCIP23 {
    repeated uint32 address_n = 1;  // BIP-32 path to derive the key from master node
    required bytes domain_hash = 2;     // domain_separator hash
    required bytes message_hash = 3;     // struct_hash
}

/**
 * Request: Ask device to verify message
 * @start
 * @next Success
 * @next Failure
 */
 message ConfluxVerifyMessage {
    required bytes signature = 2;   // signature to verify
    required bytes message = 3;     // message to verify
    required string address = 4;     // address to verify
}

/**
 * Request: Ask device to verify message
 * @start
 * @next Success
 * @next Failure
 */
 message ConfluxVerifyMessageCIP23 {
    required bytes signature = 2;   // signature to verify
    required bytes domain_hash = 3;     // domain_separator hash
    required bytes message_hash = 4;     // struct_hash
    required string address = 5;     // address to verify
}
