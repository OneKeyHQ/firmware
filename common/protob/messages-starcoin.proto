syntax = "proto2";
package hw.trezor.messages.starcoin;

// Sugar for easier handling in Java
option java_package = "com.satoshilabs.trezor.lib.protobuf";
option java_outer_classname = "TrezorMessageStarcoin";

/**
 * Request: Address at the specified index
 * @start
 * @next StarcoinAddress
 */
message StarcoinGetAddress {
    repeated uint32 address_n = 1;              // BIP-32 path to derive the key from master node
    optional bool show_display = 2;             // optionally show on display before sending the result
}

/**
 * Response: Address for the given index
 * @end
 */
message StarcoinAddress {
    optional string address = 1;                // Starcoin address as hex-encoded string
}

/**
 * Request: Ask device for Starcoin public key corresponding to address_n path
 * @start
 * @next StarcoinPublicKey
 */
 message StarcoinGetPublicKey {
    repeated uint32 address_n = 1;  // BIP-32 path to derive the key from master node
    optional bool show_display = 2; // Optionally show on display before sending the result
}

/**
 * Response: Contains Starcoin public key derived from device private seed
 * @end
 */
message StarcoinPublicKey {
    optional bytes public_key = 1;  // Starcoin public key
}

/**
 * Request: ask device to sign Starcoin transaction
 * @start
 * @next StarcoinSignedTx
 */
message StarcoinSignTx {
    repeated uint32 address_n = 1;          // BIP-32 path to derive the key from master node
    optional bytes raw_tx = 2;              // serialized raw transaction
}

/**
 * Response: signature for transaction
 * @end
 */
message StarcoinSignedTx {
    optional bytes public_key = 1;  // public key for the private key used to sign data
    optional bytes signature = 2;           // the signature of the raw transaction
}

/**
 * Request: Ask device to sign message
 * @start
 * @next StarcoinMessageSignature
 * @next Failure
 */
 message StarcoinSignMessage {
    repeated uint32 address_n = 1;
    optional bytes message = 2;
}

/**
 * Response: Signed message
 * @end
 */
message StarcoinMessageSignature {
    optional bytes public_key = 1;
    optional bytes signature = 2;
}

/**
 * Request: Ask device to verify message
 * @start
 * @next Success
 * @next Failure
 */
message StarcoinVerifyMessage {
    optional bytes public_key = 1;
    optional bytes signature = 2;
    optional bytes message = 3;
}
