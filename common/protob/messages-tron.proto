syntax = "proto2";
package hw.trezor.messages.tron;

// Sugar for easier handling in Java
option java_package = "com.satoshilabs.trezor.lib.protobuf";
option java_outer_classname = "TrezorMessageTron";

/**
 * Request: Ask device for Tron address corresponding to address_n path
 * @start
 * @next TronAddress
 * @next Failure
 */
message TronGetAddress {
    repeated uint32 address_n = 1; // BIP-32 path to derive the key from master node
    optional bool show_display = 2; // Optionally show on display before sending the result
}

/**
 * Response: Contains Tron address derived from device private seed
 * @end
 */
message TronAddress {
    optional string address = 1; // Tron address (base58)
}

/**
 * Request: Ask device to sign Tron transaction
 * @start
 * @next TronSignedTx
 */
message TronSignTx {
    repeated uint32 address_n = 1;                  // BIP-32 path to derive the key from master node
    // Common part of transaction
    required bytes ref_block_bytes = 2;             // Reference block number
    required bytes ref_block_hash = 3;              // Reference block hash
    required uint64 expiration = 4;                 // Transaction expiration
    optional string data = 5;                       // Extra transaction info
    required TronContract contract = 6;             // Contract messages
    required uint64 timestamp = 7;                  // UTC timestamp
    optional uint64 fee_limit = 8;                  // Fee limit for smartcontracts

    /***
     * Tron Contracts Messages
     *
     */
    message TronContract {
        // Transfer TRX
        message TronTransferContract {
            optional string to_address = 2;         // To address - base 58
            optional uint64 amount = 3;             // TRX amount in sun (10^-6)
        }
        // TronTriggerSmartContract
        message TronTriggerSmartContract {
            optional string contract_address = 2;   // Contract address - base58
            optional uint64 call_value = 3;         // TRX amount if any
            optional bytes data = 4;                // Contract data
            optional uint64 call_token_value = 5;   // Asset ID if any
            optional uint64 asset_id = 6;           // Asset signature
        }

        // Tron freeze resouce Type
        enum TronResourceCode {
            BANDWIDTH = 0x00;
            ENERGY = 0x01;
        }

        // Freeze TRX balance
        message TronFreezeBalanceContract {
            optional uint64 frozen_balance = 1;     // Amount to freeze
            optional uint64 frozen_duration = 2;    // Freeze minimal duration in days
            optional TronResourceCode resource = 3; // Resource type
            optional string receiver_address = 4;   // Rental Freeze receiver address - base 58
        }
        // Unfreeze TRX Balance
        message TronUnfreezeBalanceContract {
            optional TronResourceCode resource = 1; // Resource type
            optional string receiver_address = 2;   // Rental Freeze receiver address - base 58
        }
        // Withdraw witness balance
        message TronWithdrawBalanceContract {
            optional bytes owner_address = 1;
        }

        // stake 2.0
        message FreezeBalanceV2Contract {
            optional uint64 frozen_balance = 2;
            optional TronResourceCode resource = 3;
        }
        message UnfreezeBalanceV2Contract {
            optional uint64 unfreeze_balance = 2;
            optional TronResourceCode resource = 3;
        }
        message WithdrawExpireUnfreezeContract {
        }
        message DelegateResourceContract {
            optional TronResourceCode resource = 2;
            optional uint64 balance = 3;
            optional string receiver_address = 4;
            optional bool  lock = 5;
        }
        message UnDelegateResourceContract {
            optional TronResourceCode resource = 2;
            optional uint64 balance = 3;
            optional string receiver_address = 4;
        }

        optional TronTransferContract transfer_contract = 2;
        optional TronFreezeBalanceContract freeze_balance_contract = 11;
        optional TronUnfreezeBalanceContract unfreeze_balance_contract = 12;
        optional TronWithdrawBalanceContract withdraw_balance_contract = 13;
        optional TronTriggerSmartContract trigger_smart_contract = 31;
        optional FreezeBalanceV2Contract freeze_balance_v2_contract = 54;
        optional UnfreezeBalanceV2Contract unfreeze_balance_v2_contract = 55;
        optional WithdrawExpireUnfreezeContract withdraw_expire_unfreeze_contract = 56;
        optional DelegateResourceContract delegate_resource_contract = 57;
        optional UnDelegateResourceContract undelegate_resource_contract = 58;
    }
}

/**
 * Response: Contains Tron transaction signature
 * @end
 */
message TronSignedTx {
    required bytes signature = 1; // Transaction signature
    optional bytes serialized_tx = 2; // Serialized transaction
}

/**
 * Request: Ask device to sign message
 * @next TronMessageSignature
 * @next Failure
 */
 message TronSignMessage {
    repeated uint32 address_n = 1;                          // BIP-32 path to derive the key from master node
    required bytes message = 2;                             // message to be signed
}

/**
 * Response: Signed message
 * @end
 */
message TronMessageSignature {
    required bytes address = 1;                             // address used to sign the message
    required bytes signature = 2;                           // signature of the message
}
