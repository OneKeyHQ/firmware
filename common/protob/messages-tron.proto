syntax = "proto2";
package hw.trezor.messages.tron;

// Sugar for easier handling in Java
option java_package = "com.satoshilabs.trezor.lib.protobuf";
option java_outer_classname = "TrezorMessageTron";

/**
 * Request: Ask device to sign message
 * @next TronMessageSignature
 * @next Failure
 */
message TronSignMessage {
    repeated uint32 address_n = 1;                          // BIP-32 path to derive the key from master node
    required bytes message = 2;                             // message to be signed
}

/**
* Response: Signed message
* @prev TronSignMessage
*/
message TronMessageSignature {
    optional bytes address = 1;                             // address used to sign the message
    required bytes signature = 2;                           // signature of the message
}

/**
 * Request: Ask device for Tron address corresponding to address_n path
 * @start
 * @next TronAddress
 * @next Failure
 */
 message TronGetAddress {
    repeated uint32 address_n = 1;  // BIP-32 path to derive the key from master node
    optional bool show_display = 2; // Optionally show on display before sending the result
}

/**
 * Response: Contains Tron address derived from device private seed
 * @end
 */
message TronAddress {
    required string address = 1;            // Coin address in Base58 encoding
}

/**
 * Request: Ask device to sign Tron transaction
 * @start
 * @next TronSignature
 */
message TronSignRawTx {
    repeated uint32 address_n = 1;                          // BIP-32 path to derive the key from master node
    required bytes raw_tx = 2;                              // raw transaction to be signed (https://developers.tron.network/docs/parameter-and-return-value-encoding-and-decoding)
}

/**
 * Response: Tron Signature
 * @prev TronSignRawTx
 */
message TronSignature {
    required bytes signature = 1;                           // signature of the message
}

