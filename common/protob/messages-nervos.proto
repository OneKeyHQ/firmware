syntax = "proto2";
package hw.trezor.messages.nervos;

// Sugar for easier handling in Java
option java_package = "com.satoshilabs.trezor.lib.protobuf";
option java_outer_classname = "TrezorMessageNervos";

import "messages-common.proto";


/**
 * Request: Ask device for Nervos address corresponding to address_n path
 * @start
 * @next NervosAddress
 * @next Failure
 */
message NervosGetAddress {
    repeated uint32 address_n = 1;      // BIP-32 path to derive the key from master node
    optional bool show_display = 2;     // optionally show on display before sending the result
    optional bytes encoded_network = 3; // encoded Nervos network, see nervos-definitions.md for details
}

/**
 * Response: Contains an Nervos address derived from device private seed
 * @end
 */
message NervosAddress {
    optional bytes _old_address = 1 [deprecated=true];  // trezor <1.8.0, <2.1.0 - raw bytes of Nervos address
    optional string address = 2;                        // Nervos address as hex-encoded string
}

/**
 * Request: Ask device to sign transaction
 * gas_price, gas_limit and chain_id must be provided and non-zero.
 * All other fields are optional and default to value `0` if missing.
 * Note: the first at most 1024 bytes of data MUST be transmitted as part of this message.
 * @start
 * @next NervosTxRequest
 * @next Failure
 */
message NervosSignTx {
    repeated uint32 address_n = 1;                                       // BIP-32 path to derive the key from master node
    optional bytes nonce = 2 [default=''];                               // <=256 bit unsigned big endian
    required bytes gas_price = 3;                                        // <=256 bit unsigned big endian (in wei)
    required bytes gas_limit = 4;                                        // <=256 bit unsigned big endian
    optional string to = 11 [default=''];                                // recipient address
    optional bytes value = 6 [default=''];                               // <=256 bit unsigned big endian (in wei)
    optional bytes data_initial_chunk = 7 [default=''];                  // The initial data chunk (<= 1024 bytes)
    optional uint32 data_length = 8 [default=0];                         // Length of transaction payload
    required uint64 chain_id = 9;                                        // Chain Id for EIP 155
    optional uint32 tx_type = 10;                                        // Used for Wanchain
}

/**
 * Response: Device asks for more data from transaction payload, or returns the signature.
 * If data_length is set, device awaits that many more bytes of payload.
 * Otherwise, the signature_* fields contain the computed transaction signature. All three fields will be present.
 * @end
 * @next NervosTxAck
 */
message NervosTxRequest {
    optional uint32 data_length = 1;    // Number of bytes being requested (<= 1024)
    optional uint32 signature_v = 2;    // Computed signature (recovery parameter, limited to 27 or 28)
    optional bytes signature_r = 3;     // Computed signature R component (256 bit)
    optional bytes signature_s = 4;     // Computed signature S component (256 bit)
}
