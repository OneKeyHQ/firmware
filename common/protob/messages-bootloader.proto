syntax = "proto2";
package hw.trezor.messages.bootloader;

// Sugar for easier handling in Java
option java_package = "com.satoshilabs.trezor.lib.protobuf";
option java_outer_classname = "TrezorMessageBootloader";

import "messages.proto";

/**
 * Request: Ask device to erase its firmware (so it can be replaced via FirmwareUpload)
 * @start
 * @next FirmwareRequest
 */
message FirmwareErase {
    optional uint32 length = 1; // length of new firmware
}

/**
 * Request: Ask device to erase its firmware (so it can be replaced via FirmwareUpload)
 * @start
 * @next FirmwareRequest
 */
message FirmwareErase_ex {
    optional uint32 length = 1; // length of new firmware
}

/**
 * Response: Ask for firmware chunk
 * @next FirmwareUpload
 */
message FirmwareRequest {
    optional uint32 offset = 1; // offset of requested firmware chunk
    optional uint32 length = 2; // length of requested firmware chunk
}

/**
 * Request: Send firmware in binary form to the device
 * @next FirmwareRequest
 * @next Success
 * @next Failure
 */
message FirmwareUpload {
    required bytes payload = 1; // firmware to be loaded into device
    optional bytes hash = 2;    // hash of the payload
}

/**
 * Request: Perform a device self-test
 * @next Success
 * @next Failure
 */
message SelfTest {
    optional bytes payload = 1; // payload to be used in self-test
}

/**
 * Type of reboot request
 * @embed
 */
enum RebootType {
    Normal = 0;
    Boardloader = 1;
    BootLoader = 2;
}

/**
 * Request: Reboot according to requested type
 * @start
 * @next Success
 * @next Failure
 */
 message Reboot {
    required RebootType reboot_type = 1;
 }

/**
 * Request: Perform a firmware update by using file stored in EMMC
 * @next Success
 * @next Failure
 */
message FirmwareUpdateEmmc {
    // update firmware from emmc
    required string path = 1;
    // reboot or back to main screen when success
    optional bool reboot_on_success = 2;
    // default False, erase storage and SE decided by policy
    // if set to True, always erase storage and SE
    // optional bool force_erase = 3;
}